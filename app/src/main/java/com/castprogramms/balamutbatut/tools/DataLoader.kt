package com.castprogramms.balamutbatut.toolsimport com.castprogramms.balamutbatut.Repositoryimport com.castprogramms.balamutbatut.users.Studentimport com.castprogramms.balamutbatut.users.Trainerimport com.google.android.gms.auth.api.signin.GoogleSignInAccountclass DataLoader(private val repository: Repository) {    fun loadUserData(isSignedIn: GoogleSignInAccount?): Boolean {        if (isSignedIn != null) {            User.id = isSignedIn.id.toString()            User.img = isSignedIn.photoUrl.toString()            repository.getStudent(User.id).addSnapshotListener { value, error ->                if (value != null) {                    val data = value                    if (data.data != null) {                        when (data.getString("type").toString()) {                            TypesUser.STUDENT.desc -> User.typeUser = TypesUser.STUDENT                            TypesUser.TRAINER.desc -> User.typeUser = TypesUser.TRAINER                        }                        User.mutableLiveDataSuccess.postValue(true)                        when (User.typeUser) {                            TypesUser.STUDENT -> {                                User.setValueStudent(                                    data.toObject(Student::class.java)!!                                )                                if (User.student != null) {                                    repository.getStudentGroup(User.id)                                        .addOnSuccessListener {                                        if (it.documents.isNotEmpty()) {                                            User.setValueStudent(User.student?.apply {                                                groupID = it.documents.first()                                                    .getString("name").toString()                                            }!!)                                        }                                    }                                }                            }                            TypesUser.TRAINER -> User.setValueTrainer(                                data.toObject(Trainer::class.java)!!                            )                            TypesUser.NOTHING -> {}                        }                    } else {                        User.mutableLiveDataSuccess.postValue(false)                    }                } else {                    User.mutableLiveDataSuccess.postValue(false)                }            }            return true        }        else {            User.mutableLiveDataSuccess.postValue(false)            return false        }    }}